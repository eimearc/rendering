#!/usr/bin/python
# import the python renderman library
import prman

def Cube(width=1.0,height=1.0,depth=1.0) :	
	w=width/2.0
	h=height/2.0
	d=depth/2.0
	ri.ArchiveRecord(ri.COMMENT, 'Cube Generated by Cube Function')
	#rear
	face=[-w,-h,d,-w,h,d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#front
	face=[-w,-h,-d,-w,h,-d,w,-h,-d,w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	#left
	face=[-w,-h,-d,-w,h,-d,-w,-h,d,-w,h,d]									
	ri.Patch("bilinear",{'P':face})
	#right
	face=[w,-h,-d,w,h,-d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#bottom
	face=[w,-h,d,w,-h,-d,-w,-h,d,-w,-h,-d]								
	ri.Patch("bilinear",{'P':face})
	#top
	face=[w,h,d,w,h,-d,-w,h,d,-w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	ri.ArchiveRecord(ri.COMMENT, '--End of Cube Function--')

def Cubes():
	ri = prman.Ri()
	ri.TransformBegin() 
	ri.Translate(-2,0,0)
	ri.Rotate(25,0,1,0)
	Cube()
	ri.TransformEnd()
	ri.TransformBegin() 
	ri.Translate( 0,0,0)
	ri.Rotate( 25,1,1,0)
	ri.Skew(45.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)
	Cube(0.8,0.8,0.8)
	ri.TransformEnd()
	ri.TransformBegin() 
	ri.Translate(2,0,0)
	ri.Rotate(-25,1,1,1)
	Cube(0.2,2,0.2)
	ri.TransformEnd()

def HullSubdiv() :
	ri = prman.Ri()
	s = 0.5
	nverts = [4] * 1
	verts = [
		-s,-s,s, # front bottom left
		s,-s,s,  # front bottom right
		s,s,s,   # front top right
		-s,s,s   # front top left
	]
	indices = [0,1,2,3]
	ri.SubdivisionMesh("catmull-clark", nverts, indices, [ri.INTERPBOUNDARY], [0,0], [], [], {ri.P: verts})


def Cylinder(radius=0.5, height=1.0) :
	ri = prman.Ri()
	ri.TransformBegin()
	ri.Rotate(70,1,0,0)  # Rotate by 90 degrees around [1,0,0] x axis.
	nverts=[4,4,4,4,4,4]
	indices=[0,2,3,1,4,6,7,5,5,1,3,4,2,0,7,6,6,4,3,2,1,5,7,0]
	s=2
	z=1.5*s
	verts=[
		s,-s,-z, # 0
		s,s,-z,  # 1
		s,-s,z,  # 2
		s,s,z,   # 3
		-s,s,z,  # 4
		-s,s,-z, # 5
		-s,-s,z, # 6
		-s,-s,-z # 7
	]
	tags=[ri.CREASE,ri.CREASE]
	nargs=[5,1,5,1] # number of args.
	intargs=[1,5,7,0,1,3,4,6,2,3] # int args - the chain of verts that make up the edges (5 from the previous one)
	sharpness=[5,5] # sharpness of creases (float args). If >= 10 infinite sharpness.
	ri.SubdivisionMesh("catmull-clark", nverts, indices, tags, nargs, intargs, sharpness, {ri.P: verts})

	ri.TransformEnd()



ri = prman.Ri() # create an instance of the RenderMan interface
ri.Option("rib", {"string asciistyle": "indented"})

filename = "Cube.rib"
# this is the begining of the rib archive generation we can only
# make RI calls after this function else we get a core dump
ri.Begin("__render") #filename)
# ArchiveRecord is used to add elements to the rib stream in this case comments
# now we add the display element using the usual elements
# FILENAME DISPLAY Type Output format
ri.Display("Cube.exr", "it", "rgba")
# Specify PAL resolution 1:1 pixel Aspect ratio
ri.Format(720,576,1)
# now set the projection to perspective
ri.Projection(ri.PERSPECTIVE,{ri.FOV:50}) 

# now we start our world
ri.WorldBegin()

ri.Translate(0,0,10)
Cylinder()

ri.WorldEnd()
ri.End()
