#!/usr/bin/python
# import the python renderman library
import prman
import math

def Cube(width=1.0,height=1.0,depth=1.0) :	
	w=width/2.0
	h=height/2.0
	d=depth/2.0
	ri.ArchiveRecord(ri.COMMENT, 'Cube Generated by Cube Function')
	#rear
	face=[-w,-h,d,-w,h,d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#front
	face=[-w,-h,-d,-w,h,-d,w,-h,-d,w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	#left
	face=[-w,-h,-d,-w,h,-d,-w,-h,d,-w,h,d]									
	ri.Patch("bilinear",{'P':face})
	#right
	face=[w,-h,-d,w,h,-d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#bottom
	face=[w,-h,d,w,-h,-d,-w,-h,d,-w,-h,-d]								
	ri.Patch("bilinear",{'P':face})
	#top
	face=[w,h,d,w,h,-d,-w,h,d,-w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	ri.ArchiveRecord(ri.COMMENT, '--End of Cube Function--')

def Cubes():
	ri = prman.Ri()
	ri.TransformBegin() 
	ri.Translate(-2,0,0)
	ri.Rotate(25,0,1,0)
	Cube()
	ri.TransformEnd()
	ri.TransformBegin() 
	ri.Translate( 0,0,0)
	ri.Rotate( 25,1,1,0)
	ri.Skew(45.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)
	Cube(0.8,0.8,0.8)
	ri.TransformEnd()
	ri.TransformBegin() 
	ri.Translate(2,0,0)
	ri.Rotate(-25,1,1,1)
	Cube(0.2,2,0.2)
	ri.TransformEnd()

def HullSubdiv() :
	ri = prman.Ri()
	s = 0.5
	nverts = [4] * 1
	verts = [
		-s,-s,s, # front bottom left
		s,-s,s,  # front bottom right
		s,s,s,   # front top right
		-s,s,s   # front top left
	]
	indices = [0,1,2,3]
	ri.SubdivisionMesh("catmull-clark", nverts, indices, [ri.INTERPBOUNDARY], [0,0], [], [], {ri.P: verts})


def Cylinder(radius=0.5, height=1.0) :
	ri = prman.Ri()
	nFaces = 14
	nverts=[4]*nFaces
	indices=[
		# Bottom outside face
		0,1,2,3,
		# Outside faces
		0,4,5,1,
		1,5,6,2,
		2,6,7,3,
		3,7,4,0,
		# Top faces
		4,8,9,5,
		5,9,10,6,
		6,10,11,7,
		7,11,8,4,
		# Inside faces
		8,12,13,9,
		9,13,14,10,
		10,14,15,11,
		11,15,12,8,
		# Bottom inside face
		12,15,14,13
	]
	y=height
	x=math.sqrt((radius*radius)/1.5)
	z=x
	bottom_verts = [
		-x, 0, -z,
		-x, 0, z,
		x, 0, z,
		x, 0, -z
	]
	top_verts = [
		-x, y, -z,
		-x, y, z,
		x, y, z,
		x, y, -z
	]
	lip = 0.9
	x = x*lip
	z = z*lip
	top_verts_inside = [
		-x, y, -z,
		-x, y, z,
		x, y, z,
		x, y, -z
	]
	depth = 0.1
	bottom_verts_inside = [
		-x, depth, -z,
		-x, depth, z,
		x, depth, z,
		x, depth, -z
	]
	verts=bottom_verts + top_verts + top_verts_inside + bottom_verts_inside

	tags=[ri.CREASE,ri.CREASE,ri.CREASE,ri.CREASE]
	nargs=[5,1,5,1,5,1,5,1] # number of args.
	intargs=[  # int args - the chain of verts that make up the edges (5 from the previous one)
		0,1,2,3,0,
		4,5,6,7,4,
		8,9,10,11,8,
		12,13,14,15,12
	]
	sharp=2
	bottom_sharp = 7
	sharpness=[bottom_sharp,sharp,sharp,bottom_sharp] # sharpness of creases (float args). If >= 10 infinite sharpness.
	ri.SubdivisionMesh("catmull-clark", nverts, indices, tags, nargs, intargs, sharpness, {ri.P: verts})



ri = prman.Ri() # create an instance of the RenderMan interface
ri.Option("rib", {"string asciistyle": "indented"})

filename = "Cube.rib"
# this is the begining of the rib archive generation we can only
# make RI calls after this function else we get a core dump
ri.Begin("__render") #filename)
# ArchiveRecord is used to add elements to the rib stream in this case comments
# now we add the display element using the usual elements
# FILENAME DISPLAY Type Output format
ri.Display("Cube.exr", "it", "rgba")
# Specify PAL resolution 1:1 pixel Aspect ratio
ri.Format(720,576,1)
# now set the projection to perspective
ri.Projection(ri.PERSPECTIVE,{ri.FOV:50}) 

# now we start our world
ri.WorldBegin()

ri.Translate(0,-3,0)
ri.Translate(0,0,15)
ri.Rotate(-20,1,0,0)

ri.TransformBegin()
ri.Translate(-2,0,0)
Cylinder(height=4.5, radius=2)
ri.TransformEnd()

ri.TransformBegin()
ri.Translate(2,0,0)
ri.Rotate(-70,1,0,0)
Cylinder(height=5, radius=2)
ri.TransformEnd()

ri.WorldEnd()
ri.End()
